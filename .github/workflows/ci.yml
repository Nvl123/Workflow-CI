name: CI - MLflow

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  train_model:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Check Python and pip versions
        run: |
          python --version
          pip --version

      - name: Install MLflow
        run: |
          pip install --upgrade pip
          pip install mlflow==2.10.2 pandas

      - name: Install dependencies
        run: |
          pip install -r MLProject/requirements.txt

      - name: Create directories
        run: |
          mkdir -p /tmp/mlruns
          mkdir -p /tmp/model_artifacts

      - name: Prepare MLProject files
        run: |
          ls -la MLProject/
          if [ -f "air_quality_cleaned.csv" ]; then
            cp air_quality_cleaned.csv MLProject/
          fi

      - name: Run MLflow project training
        run: |
          cd MLProject
          export MLFLOW_TRACKING_URI=file:/tmp/mlruns
          mlflow run . -P fit_intercept=True --experiment-name "Air_Quality_Model" --env-manager=local
        env:
          MLFLOW_TRACKING_URI: file:/tmp/mlruns

      - name: Verify MLflow run
        run: |
          export MLFLOW_TRACKING_URI=file:/tmp/mlruns
          echo "Listing experiments:"
          mlflow experiments search
          echo "Listing runs:"
          mlflow runs list --experiment-name "Air_Quality_Model" | head -10

      - name: Get latest MLflow run_id
        id: get_run_id
        run: |
          export MLFLOW_TRACKING_URI=file:/tmp/mlruns
          
          # Get experiment ID using a more reliable method
          experiment_id=$(python3 -c "
          import mlflow
          mlflow.set_tracking_uri('file:/tmp/mlruns')
          try:
              experiment = mlflow.get_experiment_by_name('Air_Quality_Model')
              if experiment:
                  print(experiment.experiment_id)
              else:
                  print('')
          except:
              print('')
          ")

          if [ -z "$experiment_id" ]; then
            echo "Experiment not found. Trying to create it..."
            experiment_id=$(python3 -c "
            import mlflow
            mlflow.set_tracking_uri('file:/tmp/mlruns')
            try:
                exp_id = mlflow.create_experiment('Air_Quality_Model')
                print(exp_id)
            except:
                # Experiment might already exist
                experiment = mlflow.get_experiment_by_name('Air_Quality_Model')
                if experiment:
                    print(experiment.experiment_id)
                else:
                    print('')
            ")
          fi

          if [ -z "$experiment_id" ]; then
            echo "Could not get or create experiment"
            exit 1
          fi

          echo "experiment_id=$experiment_id" >> $GITHUB_ENV
          echo "Found experiment_id: $experiment_id"

          # Get the latest run ID
          run_id=$(python3 -c "
          import mlflow
          mlflow.set_tracking_uri('file:/tmp/mlruns')
          try:
              runs = mlflow.search_runs(experiment_ids=['$experiment_id'], max_results=1)
              if len(runs) > 0:
                  print(runs.iloc[0]['run_id'])
              else:
                  print('')
          except:
              print('')
          ")

          if [ -z "$run_id" ]; then
            echo "No runs found in experiment"
            exit 1
          fi

          echo "MLFLOW_RUN_ID=$run_id" >> $GITHUB_ENV
          echo "Found run_id: $run_id"

      - name: Upload MLflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mlflow-artifacts
          path: /tmp/mlruns/${{ env.experiment_id }}/${{ env.MLFLOW_RUN_ID }}/artifacts
          retention-days: 30
        continue-on-error: true

      - name: Build Docker image for MLflow model
        run: |
          export MLFLOW_TRACKING_URI=file:/tmp/mlruns
          echo "Attempting to build Docker image..."
          mlflow models build-docker \
            -m "runs:/${{ env.MLFLOW_RUN_ID }}/model" \
            -n air_quality_model \
            --enable-mlserver || echo "Docker build failed, continuing..."
        continue-on-error: true

      - name: Check Docker Hub secrets
        id: check_secrets
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "docker_secrets_available=true" >> $GITHUB_OUTPUT
          else
            echo "docker_secrets_available=false" >> $GITHUB_OUTPUT
            echo "Docker Hub secrets not available, skipping Docker operations"
          fi

      - name: Log in to Docker Hub
        if: steps.check_secrets.outputs.docker_secrets_available == 'true'
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag and push Docker image
        if: steps.check_secrets.outputs.docker_secrets_available == 'true'
        run: |
          if docker images | grep -q air_quality_model; then
            docker tag air_quality_model ${{ secrets.DOCKER_USERNAME }}/air_quality_model:latest
            docker push ${{ secrets.DOCKER_USERNAME }}/air_quality_model:latest
            echo "Docker image pushed successfully"
          else
            echo "Docker image not found, skipping push"
          fi
        continue-on-error: true

      - name: Log out from Docker Hub
        if: steps.check_secrets.outputs.docker_secrets_available == 'true'
        run: docker logout

      - name: Training Summary
        run: |
          echo "=== MLflow Training Summary ==="
          echo "Experiment ID: ${{ env.experiment_id }}"
          echo "Run ID: ${{ env.MLFLOW_RUN_ID }}"
          echo "Tracking URI: file:/tmp/mlruns"
          echo "Artifacts uploaded to GitHub Actions"
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "Docker image: ${{ secrets.DOCKER_USERNAME }}/air_quality_model:latest"
          fi
